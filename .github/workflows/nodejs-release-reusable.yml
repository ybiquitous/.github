name: Node.js Release (reusable)

on:
  workflow_call:
    inputs:
      publish:
        description: Set true if publishing to registry
        required: false
        default: true
        type: boolean
      create-release:
        description: Set true if creating release
        required: false
        default: true
        type: boolean
      draft:
        description: Set true if creating draft release
        required: false
        default: true
        type: boolean

jobs:
  release:
    if: ${{ github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    timeout-minutes: 10
    concurrency: ${{ github.workflow }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Node.js LTS
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"

      - name: Update npm to latest
        run: |
          npm install --global npm@latest
          echo "Successfully updated npm to $(npm -v)"

      - name: Install dependencies
        run: npm ci

      - name: Create tag
        id: create-tag
        env:
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          NEW_VERSION=$(jq -r '.version' package.json)
          NEW_VERSION_TAG="v${NEW_VERSION}"
          if [[ "${PR_BRANCH}" != "release/${NEW_VERSION_TAG}" ]]; then
            echo "::error::The version in package.json (${NEW_VERSION}) does not match the version in the branch name (${PR_BRANCH})."
            exit 1
          fi

          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          git tag "${NEW_VERSION_TAG}"
          git push origin "${NEW_VERSION_TAG}"
          echo "new-tag=${NEW_VERSION_TAG}" >> "${GITHUB_OUTPUT}"

      - name: Publish to npm registry
        if: ${{ inputs.publish }}
        run: |
          npm publish
          package_name=$(jq -r '.name' package.json)
          echo "::notice::Published https://www.npmjs.com/package/${package_name}"

      - name: Create GitHub release
        if: ${{ inputs.create-release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRAFT_RELEASE: ${{ inputs.draft }}
          NEW_TAG: ${{ steps.create-tag.outputs.new-tag }}
        run: |
          notes_file="${RUNNER_TEMP}/notes.txt"
          echo "See the [changelog](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/${NEW_TAG}/CHANGELOG.md) for details." >> "${notes_file}"

          prev_tag_name=$(gh release view --json tagName --jq .tagName || echo '')

          if [[ -n "${prev_tag_name}" ]]; then
            echo '' >> "${notes_file}"
            echo "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/compare/${prev_tag_name}...${NEW_TAG}" >> "${notes_file}"
          fi

          if [[ "${DRAFT_RELEASE}" == "true" ]]; then
            options='--draft'
          else
            options=''
          fi

          gh release create "${NEW_TAG}" --title "${NEW_TAG}" --notes-file "${notes_file}" ${options}

          release_url=$(gh release view "${NEW_TAG}" --json 'url' --jq '.url')

          if [[ "${DRAFT_RELEASE}" == "true" ]]; then
            echo "::notice::Released ${release_url} as draft. Edit it to publish."
          else
            echo "::notice::Released ${release_url}"
          fi
